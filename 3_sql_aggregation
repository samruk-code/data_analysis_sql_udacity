-- Find the total amount of poster_qty paper ordered in the orders table


SELECT sum(poster_qty)  total_poster_qty
FROM orders;


-- Find the total amount of standard_qty paper ordered in the orders table


SELECT sum(standard_qty)  total_standard_qty
FROM orders;


-- Find the total dollar amount of sales using the total_amt_usd in the orders table


SELECT sum(total_amt_usd)  sum_total_amt_usd
FROM orders;


-- Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. This should give a dollar amount for each
-- order in the table


SELECT id,total_amt_usd + gloss_amt_usd total_std_gloss
FROM orders;


-- Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both aggregation and a mathematical operator


SELECT sum(standard_amt_usd) / sum(standard_qty) AS standard_price_per_unit
FROM orders;


-- When was the earliest order ever placed? You only need to return the date


SELECT MIN(occurred_at)
FROM orders;


-- Try performing the same query as in question 1 without using an aggregation function


SELECT occurred_at
FROM orders
ORDER BY occurred_at
LIMIT 1;


-- When did the most recent (latest) web_event occur?


SELECT MAX(occurred_at)
FROM web_events;


-- Try to perform the result of the previous query without using an aggregation function


SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1;


-- Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order.
-- Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.


SELECT AVG(standard_qty) AS std_qty, AVG(gloss_qty) AS gloss_qty, AVG(poster_qty) AS pos_qty, 
       AVG(standard_amt_usd) AS st_amt_usd, AVG(gloss_amt_usd) AS gloss_amt_usd, AVG(poster_amt_usd) AS poster_amt_usd
FROM orders;



-- Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order



SELECT a.name AS name, o.occurred_at AS date
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
ORDER BY o.occurred_at DESC
LIMIT 1;


-- Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name



SELECT a.name AS name, SUM(o.total_amt_usd) AS total_sales
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.name;


-- Via what channel did the most recent (latest) web_event occur, and which account was associated with this web_event?
-- Your query should return only three values - the date, channel, and account name.


SELECT a.name, w.channel, w.occurred_at 
FROM accounts  a
JOIN web_events  w
ON W.account_id = a.id
ORDER BY w.occurred_at DESC
LIMIT 1;


-- Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and
-- the number of times the channel was used


SELECT w.channel, count(channel)
FROM web_events
GROUP BY channel;


-- Who was the primary contact associated with the earliest web_event?


SELECT a.name, w.occurred_at
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
ORDER BY w.occurred_at
LIMIT 1;


-- What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd.
-- Order from smallest dollar amounts to largest


SELECT a.name , MIN(total_amt_usd) smallest_order
FROM accounts a
JOIN orders o
ON o.account_id = a.id
GROUP BY a.name
ORDER BY smallest_order;



-- Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps.
-- Order from fewest reps to most reps



SELECT r.name, count(s.id) num_reps
FROM sales_reps AS s
JOIN region AS r
ON s.region_id = r.id
GROUP BY r.name
ORDER BY num_reps;


-- For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account
-- name and one for the average quantity purchased for each of the paper types for each account


SELECT a.name, AVG(o.standard_qty) AS avg_std_qty, AVG(o.gloss_qty) AS avg_gloss_qty ,AVG(o.poster_qty) AS avg_poster_qty
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.name;



-- For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name
-- and one for the average amount spent on each paper type



SELECT a.name, AVG(o.standard_amt_usd) AS avg_std_usd, AVG(o.gloss_amt_usd) AS avg_gloss_usd ,AVG(o.poster_amt_usd) AS avg_poster_usd
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.name;


-- Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns 
-- the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first


SELECT s.name, w.channel, COUNT(channel) AS num_events
FROM accounts AS a
JOIN web_events AS w
ON w.account_id = a.id
JOIN sales_reps AS s
on a.sales_rep_id = s.id
GROUP BY s.name, w.channel
ORDER BY num_events DESC;


-- Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns 
-- the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first


SELECT r.name, w.channel, COUNT(channel) AS num_events
FROM accounts AS a
JOIN web_events AS w
on w.account_id = a.id
JOIN sales_reps AS s
on a.sales_rep_id = s.id
JOIN region AS r
on s.region_id = r.id
GROUP BY r.name, w.channel
ORDER BY num_events DESC;


-- Use DISTINCT to test if there are any accounts associated with more than one region.


SELECT a.id AS ac_id , a.name AS ac_name, r.id AS reg_id, r.name AS reg_name
FROM accounts AS a
JOIN sales_reps AS s
ON a.sales_rep_id = s.id
JOIN region AS r
ON s.region_id = r.id;

-- OR


SELECT DISTINCT id,name
FROM accounts;


-- Have any sales reps worked on more than one account?


SELECT s.id,s.name, count(a.id) AS num_account
FROM accounts AS a
JOIN sales_reps AS s
ON a.sales_rep_id = s.id
GROUP BY s.id, s.name
ORDER BY num_account;


--OR


SELECT id,name
FROM sales_reps;


-- How many of the sales reps have more than 5 accounts that they manage?


SELECT s.id, s.name, COUNT(a.name) AS number_of_accounts
FROM accounts AS a
JOIN sales_reps AS s
ON a.sales_rep_id = s.id
GROUP BY s.id, s.name
HAVING COUNT(a.name) > 5
ORDER BY number_of_accounts;


-- How many accounts have more than 20 orders?


SELECT a.id, a.name, COUNT(a.id) AS number_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
HAVING COUNT(a.id) > 20
ORDER BY number_of_orders;


-- Which account has the most orders?


SELECT a.id, a.name, COUNT(a.id) AS number_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
HAVING COUNT(a.id) > 20
ORDER BY number_of_orders desc
LIMIT 1;


--Which accounts spent more than 30,000 usd total across all orders?


SELECT a.id, a.name, sum(o.total_amt_usd) AS sum_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
HAVING sum(o.total_amt_usd) > 30000
ORDER BY sum_of_orders;



-- Which accounts spent less than 1,000 usd total across all orders?


SELECT a.id, a.name, sum(o.total_amt_usd) AS sum_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
HAVING sum(o.total_amt_usd) < 1000
ORDER BY sum_of_orders;


-- Which account has spent the most with us?



SELECT a.id, a.name, sum(o.total_amt_usd) AS sum_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
ORDER BY sum_of_orders DESC
LIMIT 1;


-- Which account has spent the least with us?


SELECT a.id, a.name, sum(o.total_amt_usd) as sum_of_orders
FROM accounts AS a
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.id, a.name
ORDER BY sum_of_orders 
LIMIT 1;


--Which accounts used facebook as a channel to contact customers more than 6 times?


SELECT a.id, a.name, w.channel, count(w.channel) AS number_of_time_channel
FROM accounts AS a
JOIN web_events AS w
ON w.account_id = a.id
GROUP BY a.id,a.name,w.channel
HAVING COUNT(w.channel) > 6 AND w.channel = ‘facebook’
ORDER BY number_of_time_channel;



-- Which account used facebook most as a channel?


SELECT a.id, a.name, w.channel, count(w.channel) AS number_of_time_channel
FROM accounts AS a
JOIN web_events AS w
ON w.account_id = a.id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY number_of_time_channel DESC
LIMIT 1;


--Which channel was most frequently used by most accounts?


SELECT a.id, a.name, w.channel, count(w.channel) AS number_of_time_channel
FROM accounts AS a
JOIN web_events AS w
ON w.account_id = a.id
GROUP BY a.id, a.name, w.channel
ORDER BY number_of_time_channel DESC
LIMIT 10;


-- Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?



SELECT DATE_TRUNC('year',occurred_at) AS order_year , SUM(total_amt_usd) AS total
FROM orders
GROUP BY order_year
ORDER BY total;


-- Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?


SELECT DATE_TRUNC('month',occurred_at) AS ord_month , SUM(total_amt_usd) AS total
FROM orders
WHERE occurred_at BETWEEN ‘2014-01-01’ AND ‘2017-01-01’
GROUP BY ord_month
ORDER BY total;


-- Which year did Parch & Posey have the greatest sales in terms of total number of orders? Are all years evenly represented by the dataset?


SELECT DATE_TRUNC('year',occurred_at) AS ord_year , COUNT(total) AS total_num_order
FROM orders
GROUP BY ord_year
ORDER BY total_num_order DESC;


-- Which month did Parch & Posey have the greatest sales in terms of total number of orders? Are all months evenly represented by the dataset?


SELECT DATE_TRUNC('month', occurred_at) AS ord_month , COUNT(total) AS total_num_order
FROM orders
WHERE occurred_at BETWEEN ‘2014-01-01’ AND ‘2017-01-01’
GROUP BY ord_month
ORDER BYtotal_num_order DESC;



-- In which month of which year did Walmart spend the most on gloss paper in terms of dollars?



SELECT DATE_TRUNC('month', o.occurred_at) AS ord_month, SUM(o.gloss_amt_usd) AS total_spent
FROM orders AS o
JOIN accounts AS a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY ord_month
ORDER BY total_spent DESC
LIMIT 1;



-- Write a query to display for each order, the account ID, total amount of the order, and the level of the order - ‘Large’ or ’Small’ -
-- depending on if the order is $3000 or more, or smaller than $3000.


SELECT a.id, o.total_amt_usd,
CASE WHEN o.total_amt_usd >= 3000 THEN 'Large'
ELSE 'small'
END AS order_level
FROM orders AS o
JOIN accounts AS a
ON o.account_id = a.id;



-- Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three categories are:
-- 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.



SELECT CASE WHEN total >= 2000 THEN 'At least 2000'
	    WHEN total >= 1000 AND total < 2000 THEN 'between 1000 and 2000'
       ELSE 'less than 1000' END AS category_type, COUNT(*) order_count
FROM orders
GROUP BY category_type;



-- We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top level includes anyone with a Lifetime
-- Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd.
-- Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer,
-- and the level. Order with the top spending customers listed first.



SELECT a.name , SUM(o.total_amt_usd) AS total_spent,
CASE WHEN SUM(o.total_amt_usd) > 200000 THEN 'top level'
     WHEN SUM(o.total_amt_usd) > 100000 THEN 'second level'
     ELSE 'lowest level' END AS levels
FROM accounts AS A
JOIN orders AS o
ON o.account_id = a.id
GROUP BY a.name
ORDER BY levels DESC;


-- We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017.
-- Keep the same levels as in the previous question. Order with the top spending customers listed first.



SELECT a.name , SUM(o.total_amt_usd) AS total_spent,
CASE WHEN SUM(o.total_amt_usd) > 200000 THEN 'top level'
     WHEN SUM(o.total_amt_usd) > 100000 THEN 'second level'
     ELSE 'lowest level' END AS levels
FROM accounts AS A
JOIN orders AS o
ON o.account_id = a.id
WHERE o.occurred_at < '2015-12-31'
GROUP BY a.name
ORDER BY levels DESC;


-- We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name,
-- the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top sales people first in your final table.
 
 
 SELECT s.id, s.name, count(*) AS total_order,
CASE WHEN count(*) > 200 THEN 'top'
ELSE 'not' END AS sales_rep_levels
FROM accounts AS A
JOIN orders AS o
ON o.account_id = a.id
JOIN sales_reps AS s
ON a.sales_rep_id = s.id
GROUP BY s.id, s.name
ORDER BY sales_rep_levels DESC;


-- The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics
-- represented as well. We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders or more than 750000
-- in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders,
-- total sales across all orders, and a column with top, middle, or low depending on this criteria. Place the top sales people based on dollar amount of sales
-- first in your final table. You might see a few upset sales people by this criteria!


SELECT s.id, s.name, count(*) AS total_order, SUM(o.total_amt_usd) AS total_spent,
CASE WHEN count(*) > 200 OR sum(o.total_amt_usd) > 750000 THEN 'top'
WHEN count(*) > 150 OR sum(o.total_amt_usd) > 500000 THEN 'middle'
ELSE 'not' END AS sales_rep_levels
FROM accounts AS A
JOIN orders AS o
ON o.account_id = a.id
JOIN sales_reps AS s
ON a.sales_rep_id = s.id
GROUP BY s.id, s.name
ORDER BY total_spent DESC;
